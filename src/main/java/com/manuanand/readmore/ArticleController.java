package com.manuanand.readmore;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/readmore/article") // This means URL's start with /readmore (after Application path)
public class ArticleController {
	@Autowired // This means to get the bean called articleRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ArticleRepository articleRepository;
	
	///
	// Article Repository
	///
	@PostMapping(path="/addArticle") // Map ONLY POST Requests
	public @ResponseBody String addArticle (@RequestParam String url, 
			@RequestParam String description, @RequestParam Integer ownerReaderId) {

		Article newArticle = new Article();
		newArticle = populateArticle(newArticle, url, description, ownerReaderId);
		articleRepository.save(newArticle);
		
		return "Saved";
	}

	@GetMapping(path="/getAllArticles")
	public @ResponseBody Iterable<Article> getArticles() {
		
		// This returns a JSON or XML with the users
		return articleRepository.findAll();
	}
	
	@GetMapping(path="/getArticleById")
	public @ResponseBody Article getArticleById(@RequestParam int id) {
		
		Optional<Article> article = articleRepository.findById(id);
		if (!article.isEmpty()) {
			return article.get();
		} 
		
		return null;
	}
	
	///
	/// Helper Methods
	///
	private Article populateArticle( Article newArticle, String url, String description, 
			Integer ownerReaderId)
	{
		newArticle.setUrl(url);
		newArticle.setDescription(description);
		newArticle.setOwnerReaderId(ownerReaderId);
		
		return newArticle;
	}
}