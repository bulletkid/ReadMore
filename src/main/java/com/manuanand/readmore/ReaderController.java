package com.manuanand.readmore;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/readmore") // This means URL's start with /readmore (after Application path)
public class ReaderController {
	@Autowired // This means to get the bean called readerRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ReaderRepository readerRepository;
	
	@Autowired // This means to get the bean called articleRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ArticleRepository articleRepository;
	
	///
	// Reader Repository
	///
	@PostMapping(path="/addReader") // Map ONLY POST Requests
	public @ResponseBody String addReader (@RequestParam String name, 
			@RequestParam String email, @RequestParam String password) {

		Reader newReader = new Reader();
		newReader = populateReader(newReader, name, email, password);
		readerRepository.save(newReader);
		
		return "Saved";
	}
	
	@PostMapping(path="/addArticle") // Map ONLY POST Requests
	public @ResponseBody String addArticle (
			@RequestParam Integer ownerReaderId, @RequestParam String password,
			@RequestParam String url, @RequestParam(required = false) String description) {

		// Check if reader exists
		/*
		Integer ownerReaderId = null;
		try {
			ownerReaderId = Integer.parseInt(ownerReaderIdString);
		} catch (NumberFormatException ex) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Reader with ID" + ownerReaderId + " not found");
		}
		*/
		
		Optional<Reader> reader = readerRepository.findById(ownerReaderId);
		if (reader.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Reader with ID" + ownerReaderId + " not found");
		} 
		
		// Check if password matches
		Reader ownerReader = reader.get();
		if (!ownerReader.getPassword().equals(password)) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Password mismatched.");
		}
		
		// Everything checks out - Create article
		Article article = new Article();
		article.setUrl(url);
		article.setDescription(description);
		article.setOwnerReaderId(ownerReaderId);
		
		articleRepository.save(article);
		
		return "Article saved";
	}

	@GetMapping(path="/getAllReaders")
	public @ResponseBody Iterable<Reader> getReaders() {
		
		// This returns a JSON or XML with the users
		return readerRepository.findAll();
	}
	
	@GetMapping(path="/getReaderById")
	public @ResponseBody Reader getReaderById(@RequestParam Integer id) {
		
		Optional<Reader> reader = readerRepository.findById(id);
		if (!reader.isEmpty()) {
			return reader.get();
		} 
		
		return null;
	}
	
	///
	/// Helper Methods
	///
	private Reader populateReader( Reader newReader, String name, String email, String password)
	{
		newReader.setName(name);
		newReader.setEmail(email);
		newReader.setPassword(password);
		
		return newReader;
	}
}